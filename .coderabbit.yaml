language: ko-KR
tone_instructions: ''
early_access: false
enable_free_tier: true
reviews:
  profile: chill
  request_changes_workflow: true
  high_level_summary: true
  high_level_summary_placeholder: '@coderabbitai summary'
  auto_title_placeholder: '@coderabbitai'
  review_status: true
  commit_status: true
  poem: false
  collapse_walkthrough: true
  sequence_diagrams: false
  changed_files_summary: true
  labeling_instructions: []
  path_filters:
    - '**/*'
    - '**/gen/**'
    - '!**/test/**/gen/**'
    - '!**/.git/**'
    - '!**/target/**'
  path_instructions:
    - path: '**/test/java/**/*.java'
      instructions: |
        For test code, focus on:
        - Correctness of test assertions
        - Test coverage of edge cases
        - Clear test naming and documentation
        - Be more lenient with code style and minor optimisations
    - path: "**/*Controller.java"
      instructions: >
          Review the API endpoints based on this guidelines.
          
          ### Richardson Maturity Model (RMM)
          1. Level 0: Single URI with POST requests for all actions.
          2. Level 1: Separate URIs for individual resources.
          3. Level 2: Use of HTTP methods (GET, POST, PUT, DELETE) to define operations on resources.
          4. Level 3: Hypermedia (HATEOAS) for advanced RESTful APIs.
          
          ### API Conventions
          - URI Rules:
            - Should be intuitive and self-explanatory.
            - Should not map 1:1 to database tables.
            - Must be stateless, with no session state between requests.
            - Include "api" and version in the URI (/api/{version}/resource).
            - Use kebab-case for URIs and camelCase for parameters and body contents.
            - Resource identifiers should be unique and only one per URI path.
          
          - Design Principles:
            - APIs should be designed around resources, which are abstractions rather than direct database tables.
            - Stateless APIs facilitate scalability and flexibility.
            - Clear separation of frontend and backend via URI structure.
            - Versioning in URI paths is preferred for clarity and ease of caching.
            - Maintain consistent naming conventions across the API.
            - Use plural forms for resource names (/users instead of /user).
            - Complex actions can include verbs in the URI (/orders/{orderId}/cancel).
          
          - Implementation Details:
            - Avoid deeply nested resource paths to ensure maintainability.
            - Ensure URIs reflect the data they provide, not the permissions or roles required to access them.
            - Keep URIs simple and predictable, aiding both developers and automated systems.
  abort_on_close: true
  auto_review:
    enabled: true
    auto_incremental_review: true
    ignore_title_keywords: []
    labels: []
    drafts: false
    base_branches:
      - 'main'
  tools:
    shellcheck:
      enabled: true
    ruff:
      enabled: false
    markdownlint:
      enabled: true
    github-checks:
      enabled: true
      timeout_ms: 90000
    languagetool:
      enabled: true
      enabled_only: false
      level: default
      enabled_rules: []
      disabled_rules:
        - EN_UNPAIRED_BRACKETS
      enabled_categories: []
      disabled_categories:
        - TYPOS
        - TYPOGRAPHY
        - CASING
    biome:
      enabled: true
    hadolint:
      enabled: false
    swiftlint:
      enabled: true
    phpstan:
      enabled: false
      level: default
    golangci-lint:
      enabled: false
    yamllint:
      enabled: true
    gitleaks:
      enabled: true
    checkov:
      enabled: false
    detekt:
      enabled: false
    eslint:
      enabled: true
    rubocop:
      enabled: false
    buf:
      enabled: false
    regal:
      enabled: false
    actionlint:
      enabled: true
    pmd:
      enabled: true
    cppcheck:
      enabled: false
    semgrep:
      enabled: true
    circleci:
      enabled: true
    ast-grep:
      packages: []
      rule_dirs: []
      util_dirs: []
      essential_rules: true
chat:
  auto_reply: true
knowledge_base:
  opt_out: false
  learnings:
    scope: auto
  issues:
    scope: auto
  jira:
    project_keys: []
  linear:
    team_keys: []
  pull_requests:
    scope: auto